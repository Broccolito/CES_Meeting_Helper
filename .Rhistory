devtools::install_github("iainmwallace/scaffoldingShiny")
library(scaffoldingShiny)
# define list of fields for data entry
input_list<-list(type=c("Text","Numeric","Text"),id=c("name","age","description"),label=c("name","age","description"))
# scaffold app
build_basic_app(input_list,datastore_type="sqllite")
shiny::runApp('CES_Meeting_Helper')
# input -------------------------------------------------------------------
input_data_tab<-function(){
tabItem(tabName = "input_data_tab",
fluidRow(
box(width=12,title="",
includeMarkdown("save_data.md"))
),
fluidRow(
box(width=12,title="",
textInput(inputId="name",label="name",placeholder="Change placeholder")%>%
shinyInput_label_embed(
icon("info") %>%
bs_embed_tooltip(title = "Change this help text for input")
),
numericInput(inputId="age",label="age",value=1, min = NA, max = NA, step = NA)
%>%
shinyInput_label_embed(
icon("info") %>%
bs_embed_tooltip(title = "Change this help text for input")
),
textInput(inputId="description",label="description",placeholder="Change placeholder")%>%
shinyInput_label_embed(
icon("info") %>%
bs_embed_tooltip(title = "Change this help text for input")
))
),fluidRow(
actionButton("save", "Save")
)
)
}
# browse tab function ------------------------------------------------------------------
browse_data_tab<-function(){
tabItem(tabName = "browse_data_tab",
fluidRow(
box(width=12,title="",
includeMarkdown("browse_data.md"))
),
fluidRow(
box(width=12,title="Browse Data",
withSpinner(DT::dataTableOutput('data')),
downloadButton("download_data")
)
)
)
}
# Dashboard ---------------------------------------------------------------
dashboardPage(
dashboardHeader(title = "Title"),
dashboardSidebar(
sidebarMenu(
id = "tabs",
menuItem("Input data", tabName = "input_data_tab", icon=icon("info")),
menuItem("Browse data",tabName = "browse_data_tab",icon = icon("info"))
)
),
dashboardBody(
#tags$head(includeScript("tracking.js")),
useShinyjs(),
#    shinyjs::inlineCSS(appCSS),
tags$head(tags$style(HTML("
.shiny-split-layout > div {
overflow: visible;
}
"))),
tabItems(
input_data_tab(),
browse_data_tab()
),
use_bs_tooltip()
)
)
rm(list = ls())
setwd(choose.dir())
getwd()
# define list of fields for data entry
input_list<-list(type=c("Text", "Text"),id=c("name", "availability"),label=c("Name","Availability"))
# scaffold app
build_basic_app(input_list,datastore_type="sqllite")
library(scaffoldingShiny)
library(scaffoldingShiny)
# define list of fields for data entry
input_list<-list(type=c("Text", "Text"),id=c("name", "availability"),label=c("Name","Availability"))
# scaffold app
build_basic_app(input_list,datastore_type="sqllite")
shiny::runApp()
runApp()
runApp()
runApp()
library(shinyWidgets)
?actionBttn
runApp()
runApp()
runApp()
runApp()
runApp()
library(shiny)
library(bsplus)
library(shinydashboard)
library(shinycssloaders)
library(shinyjs)
library(shinyWidgets)
library(dplyr)
library(DT)
library(glue)
library(readr)
library(DBI)
library(dplyr)
library(dbplyr)
library(RSQLite)
library(stringr)
source("helper.R")
conn <- dbConnect(RSQLite::SQLite(),"my-db.sqlite")
datatable="my_datatable"
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
rm(list=  ls())
gc()
graphics.off()
shiny::runApp()
runApp('C:/Users/wanju/Desktop/Resource/CES_Meeting_Helper')
shiny::runApp()
runApp()
rsconnect::deployApp()
libr
library(shiny)
library(rsconnect)
deployApp(getwd())
rsconnect::appDependencies()
install.packages("MASS")
install.packages("MASS")
update.packages()
if (!requireNamespace("devtools")) install.packages("devtools")
devtools::install_github("rstudio/packrat")
shiny::runApp()
q()
shiny::runApp()
rm(list = ls())
q()
shiny::runApp()
install.packages("shinyAce")
library(shinyAce)
library(shiny); runApp(system.file("examples/02-eval", package="shinyAce"));
system.file("examples/02-eval", package="shinyAce")
library(shiny); runApp(system.file("examples/05-hotkeys", package="shinyAce"));
runApp()
runApp('~/R/win-library/3.5/shinyAce/examples/02-eval')
runApp()
runApp()
runApp()
use_bs_tooltip()
use_bs_tooltip
runApp()
rm(list = ls())
library("scaffoldingShiny", lib.loc="~/R/win-library/3.5")
shiny::runApp()
q()
